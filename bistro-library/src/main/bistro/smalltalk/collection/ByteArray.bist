"ByteArray.bist"
package: smalltalk.collection;

"Represents an array of integers in the range 0-255.
@author Copyright 1999,2000 Nikolas S. Boyd. All rights reserved."
ArrayedCollection subclass: ByteArray
metaclass:
[
"creating instances"

	"Returns a new empty ByteArray."
	new
	[	^self new: 0
	]

	"Returns a new ByteArray with the supplied (capacity)."
	new: capacity
	{	return new ByteArray( (Number) capacity );
	}

	"Returns a new ByteArray with the supplied (elements)."
	withAll: elements (byte[])
	[	^ByteArray basicNew: elements
	]
]
class:
[
	"Contains the array elements."
	contents (byte[]).

	"Constructs a new (empty) Array."
	protected ByteArray
	{	contents = new byte[0];
	}

	"Constructs a new Array given its initial (capacity)."
	protected ByteArray: capacity (Number)
	{	contents = new byte[ capacity.primitiveInteger() ];
	}

	"Constructs a new Array with its initial (elements)."
	protected ByteArray: elements (byte[])
	[	contents := elements.
	]

"accessing"

	"Returns the primitive contents of the receiver."
	(byte[]) primitiveContents
	[	^contents
	]

	"Returns the number of elements contained in the receiver."
	size
	{	return primitive.IntegerFrom( contents.length );
	}

"accessing elements"

	"Returns the element at (index), or evaluates (aBlock),
	if the receiver does not include an (index)."
	at: index ifAbsent: aBlock (ZeroArgumentBlock)
	{	int i = this.checkIndex_ifAbsent( index, aBlock );
		return primitive.IntegerFrom( contents[i] );
	}

	"Returns (element) after storing it at (index) in the receiver."
	at: index put: element
	{	int i = this.checkIndex( index );
		SmallInteger n = (SmallInteger) element;
		contents[i] = n.primitiveByte();
		return element;
	}

"comparing"

	"Indicates whether the receiver is equivalent to (aCollection)."
	= aCollection (ByteArray)
	[	^primitive BooleanFrom: 
			(contents equals: aCollection primitiveContents)
	]

	"Indicates whether the receiver is equivalent to (aCollection)."
	= aCollection
	[	[ ^self = (aCollection as: ByteArray) ]
			catch: [ :e (java.lang.ClassCastException) | ^false ]
	]

	"Returns an integer value that may be used for equivalence tests."
	(int) hashCode
	{	return primitiveContents().hashCode();
	}

"enumerating"

	"Evaluates (aBlock) with each receiver element."
	do: aBlock (OneArgumentBlock)
	{	for( int i = 0; i < contents.length; i++ ) {
			aBlock.value( primitive.IntegerFrom( contents[i] ) );
		}
		return this;
	}
]
