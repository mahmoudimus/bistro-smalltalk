"IdentitySet.bist"
package: smalltalk.collection;

"Represents a set of objects, each of which occurs only once. Supports
instantiation with a primitive java.util.Set. Uses a java.util.IdentityHashMap
as the primitive contents.
@author Copyright 2002 Nikolas S. Boyd. All rights reserved."
Collection subclass: IdentitySet
implements: ExtensibleCollection ExcisableCollection
metaclass:
[
	"Returns a new empty Set with the supplied (capacity)."
	new
	[	^self new: 10
	]

	"Returns a new empty Set with the supplied (capacity)."
	new: capacity
	[	c (Number) := capacity.
		^IdentitySet basicNew: c
	]

	"Returns a new Set with a (primitiveSet) as its contents."
	from: primitiveSet (java.util.Set)
	[	^IdentitySet basicNew: primitiveSet : false
	]

	"Returns a new Set with synchronized access to a (primitiveSet) as its contents."
	synchronizedFrom: primitiveSet (java.util.Set)
	[	^IdentitySet basicNew: primitiveSet : true
	]
]
class:
[
	"Indicates whether an object is present."
	private static final Present (java.lang.Object) := java.lang.Object basicNew.

	"Contains the set elements."
	contents (java.util.Map).

	"Constructs a new (empty) IdentitySet."
	protected IdentitySet
	[	contents := java.util.IdentityHashMap basicNew.
	]

	"Constructs a new IdentitySet given its initial (capacity)."
	protected IdentitySet: capacity (Number)
	[	contents := java.util.IdentityHashMap basicNew: capacity primitiveInteger.
	]

	"Constructs a new IdentitySet with a (primitiveSet)."
	protected IdentitySet: primitiveSet (java.util.Set) : syncMap (Boolean)
	[	contents := java.util.IdentityHashMap basicNew: primitiveSet size.
		syncMap ifTrue: [
			contents := (java.util.Collections synchronizedMap: contents).
		].
		self addAll: (Set from: primitiveSet).
	]

"accessing"

	"Returns the primitive contents of the receiver."
	(java.util.Map) primitiveContents
	[	^contents
	]

	"Returns the number of elements contained in the receiver."
	size
	[	^primitive IntegerFrom: contents size
	]

"adding elements"

	"Returns an (element) after adding it to the receiver."
	add: element
	[	contents put: element : Present.
		^element
	]

	"Returns a collection of (elements) after adding them to the receiver."
	addAll: elements
	[	elements do: [ :element | self add: element ].
		^elements
	]

"comparing"

	"Indicates whether the receiver is equivalent to (aCollection)."
	= aCollection (IdentitySet)
	[	^primitive BooleanFrom: 
			(contents equals: aCollection primitiveContents)
	]

	"Indicates whether the receiver is equivalent to (aCollection)."
	= aCollection
	[	[ ^self = (aCollection as: IdentitySet) ]
			catch: [ :e (java.lang.ClassCastException) | ^false ]
	]

	"Returns an integer value that may be used for equivalence tests."
	(int) hashCode
	[	^contents hashCode
	]

"converting"

	"Returns a Set that contains the elements of the receiver."
	asSet
	[	^self
	]

"enumerating"

	"Evaluates (aBlock) with each receiver element."
	do: aBlock (OneArgumentBlock)
	{	// optimizes iteration over the elements
		java.util.Iterator it = contents.keySet().iterator();
		while( it.hasNext() ) aBlock.value( (Object) it.next() );
		return this;
	}

"removing elements"

	"Returns an (element) after removing it from the receiver."
	remove: element 
	[	^self remove: element 
			ifAbsent: [ ^self elementNotFound ]
	]

	"Returns an (element) after removing it from the receiver, 
	or evaluates (aBlock) if the (element) is absent."
	remove: element ifAbsent: aBlock (ZeroArgumentBlock)
	[	removed (Object) := contents remove: element.
		(self class isNull: removed) ifTrue: aBlock.
		^element
	]

	"Returns (elements) after removing the first occurrence of each
	from the receiver."
	removeAll: elements 
	[	elements do: [ :element | self remove: element ].
		^elements
	]

	"Removes elements selected by the supplied (criteria) from the receiver."
	removeAllSuchThat: criteria 
	[	result := self class new: 10.
		self do: [ :element |
			(criteria value: element) ifTrue: [
				result add: element.
				self remove: element
			]
		].
		^result
	]

"streaming"

	"Returns a new stream for appending to the receiver."
	writeStream
	[	^'smalltalk.stream.WriteStream' resolvedToClass on: self
	]

"testing"

	"Indicates whether the receiver is empty."
	isEmpty
	[	^primitive BooleanFrom: contents isEmpty
	]

	"Indicates whether the receiver includes (anObject)."
	includes: anObject
	[	^primitive BooleanFrom: (contents containsKey: anObject)
	]
]