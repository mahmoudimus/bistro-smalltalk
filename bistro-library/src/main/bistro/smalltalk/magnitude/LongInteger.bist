"LongInteger.bist"
package: smalltalk.magnitude;

"Represents a long integer value.
@author Copyright 1999,2000 Nikolas S. Boyd. All rights reserved."
Integer subclass: LongInteger
metaclass:
[
	"Returns a LongInteger whose value is (primitiveLong)."
	from: primitiveLong (long)
	[	^LongInteger basicNew: primitiveLong
	]

	"Returns a LongInteger whose value is (aNumber)."
	coerce: aNumber (Number)
	[	^self from: aNumber primitiveLong
	]

	"Initializes class variables."
	protected initialize [
		generality := 20.
	]

"characteristics"

	"Returns the maximum value."
	maximum
	{	return new LongInteger( java.lang.Long.MAX_VALUE );
	}

	"Returns the minimum value."
	minimum
	{	return new LongInteger( java.lang.Long.MIN_VALUE );
	}

	"Returns the precision of the primitive representation."
	precision
	[	^64
	]

	"Returns the radix of the primitive representation."
	radix
	[	^2
	]
]
class:
[
	"Used for numeric coercions."
	static generality (SmallInteger).

	"Holds a primitive long integer value."
	primitiveValue (long).

	"Constructs a new LongInteger given a (primitiveInteger)."
	protected LongInteger: primitiveInteger (long)
	{	primitiveValue = primitiveInteger;
	}

	"Constructs a new LongInteger."
	protected LongInteger
	{	primitiveValue = 0L;
	}

"arithmetic - final"

	"Returns the sum of the receiver and (aNumber)."
	final + aNumber (LongInteger)
	{	return new LongInteger(
			this.primitiveValue + aNumber.primitiveValue
		);
	}

	"Returns the difference between the receiver and (aNumber)."
	final - aNumber (LongInteger)
	{	return new LongInteger(
			this.primitiveValue - aNumber.primitiveValue
		);
	}

	"Returns the product of the receiver and (aNumber)."
	final * aNumber (LongInteger)
	{	return new LongInteger(
			this.primitiveValue * aNumber.primitiveValue
		);
	}

	"Returns the ratio of (aNumber) and the receiver."
	final / aNumber (LongInteger) {
		if (aNumber.primitiveValue == 0L) zeroDivide();
		return Fraction.$class.numerator_denominator( this, aNumber );
	}

"arithmetic"

	"Returns the sum of the receiver and (aNumber)."
	+ aNumber (Number)
	[	^self generality < aNumber generality
			ifTrue: [ aNumber + self ]
			ifFalse: [ self + aNumber asLongInteger ]
	]

	"Returns the product of the receiver and (aNumber)."
	* aNumber (Number)
	[	^self generality < aNumber generality
			ifTrue: [ aNumber * self ]
			ifFalse: [ self * aNumber asLongInteger ]
	]

	"Returns the ratio of the receiver and (aNumber)."
	/ aNumber (Number)
	[	^self generality < aNumber generality
			ifTrue: [ (self coerceTo: aNumber class) / aNumber ]
			ifFalse: [ self / aNumber asLongInteger ]
	]

	"Returns the integer ratio of the receiver and (aNumber)."
	// aNumber (LongInteger) {
		if (aNumber.primitiveValue == 0L) zeroDivide();
		return new LongInteger(
			this.primitiveValue / aNumber.primitiveValue
		);
	}

	"Returns the remainder left from dividing the receiver by (aNumber)."
	\\ aNumber (LongInteger) {
		if (aNumber.primitiveValue == 0L) zeroDivide();
		return new LongInteger(
			this.primitiveValue % aNumber.primitiveValue
		);
	}

"comparing - final"

	"Indicates whether the receiver is equivalent to (aNumber)."
	final = aNumber (LongInteger)
	{	return primitive.BooleanFrom(
			this.primitiveValue == aNumber.primitiveValue
		);
	}

	"Indicates whether the receiver is less than (aNumber)."
	final < aNumber (LongInteger)
	{	return primitive.BooleanFrom(
			this.primitiveValue < aNumber.primitiveValue
		);
	}

	"Indicates whether the receiver is more than (aNumber)."
	final > aNumber (LongInteger)
	{	return primitive.BooleanFrom(
			this.primitiveValue > aNumber.primitiveValue
		);
	}

"comparing"

	"Indicates whether the receiver is equivalent to (aNumber)."
	= aNumber (Number)
	[	^self generality < aNumber generality
			ifTrue: [ aNumber = self ]
			ifFalse: [ self = aNumber asLongInteger ]
	]

	"Indicates whether the receiver is less than (aNumber)."
	< aNumber (Number)
	[	^self generality < aNumber generality
			ifTrue: [ aNumber > self ]
			ifFalse: [ self < aNumber asLongInteger ]
	]

	"Indicates whether the receiver is more than (aNumber)."
	> aNumber (Number)
	[	^self generality < aNumber generality
			ifTrue: [ aNumber < self ]
			ifFalse: [ aNumber asLongInteger < self ]
	]

"converting"

	"Converts the receiver to a primitive byte value."
	(byte) primitiveByte
	{	return (byte) primitiveValue;
	}

	"Converts the receiver to a primitive char value."
	(char) primitiveCharacter
	{	return (char) primitiveValue;
	}

	"Converts the receiver to a primitive int value."
	(int) primitiveInteger
	{	return (int) primitiveValue;
	}

	"Converts the receiver to a primitive long value."
	(long) primitiveLong
	{	return primitiveValue;
	}

	"Converts the receiver to a primitive float value."
	(float) primitiveFloat
	{	return (float) primitiveValue;
	}

	"Converts the receiver to a primitive double value."
	(double) primitiveDouble
	{	return (double) primitiveValue;
	}

	"Converts the receiver to an elementary interger."
	(java.lang.Long) elementaryInteger
	{	return new java.lang.Long( primitiveValue );
	}

	"Converts the receiver to an elementary number."
	(java.lang.Number) elementaryNumber
	{	return elementaryInteger();
	}

	"Converts the receiver to a long integer."
	(LongInteger) asLongInteger
	[	^self
	]

	"Returns the result of converting the receiver to a string."
	asString
	{	return primitive.StringFrom( 
			java.lang.Long.toString( primitiveValue ) 
		);
	}

	"Returns the level of generality used in coercion."
	generality
	[	^generality
	]

"manipulating bits"

	"Returns the bitwise intersection of the receiver and (anInteger)."
	bitAnd: anInteger (Integer)
	[	^self generality < aNumber generality
			ifTrue: [ aNumber bitAnd: self ]
			ifFalse: [ self bitAnd: aNumber asLongInteger ]
	]

	"Returns the bitwise union of the receiver and (anInteger)."
	bitOr: anInteger (Integer)
	[	^self generality < anInteger generality
			ifTrue: [ anInteger bitOr: self ]
			ifFalse: [ self bitOr: anInteger asLongInteger ]
	]

	"Returns the bitwise exclusive or of the receiver and (anInteger)."
	bitXor: anInteger (Integer)
	[	^self generality < anInteger generality
			ifTrue: [ anInteger bitXor: self ]
			ifFalse: [ self bitXor: anInteger asLongInteger ]
	]

	"Returns the bitwise inverse of the recevier."
	bitInvert
	{	return new LongInteger( ~primitiveLong() );
	}

"manipulating bits - concrete"

	"Returns the bitwise intersection of the receiver and (anInteger)."
	bitAnd: anInteger (LongInteger)
	{	return new LongInteger( 
			primitiveLong() & anInteger.primitiveLong() 
		);
	}

	"Returns the bitwise union of the receiver and (anInteger)."
	bitOr: anInteger (LongInteger)
	{	return new LongInteger( 
			primitiveLong() | anInteger.primitiveLong() 
		);
	}

	"Returns the bitwise exclusive or of the receiver and (anInteger)."
	bitXor: anInteger (LongInteger)
	{	return new LongInteger( 
			primitiveLong() ^ anInteger.primitiveLong() 
		);
	}

	"Returns the value of the bit at (index)."
	bitAt: index (SmallInteger)
	{	int x = index.primitiveInteger() - 1;
		if (x < 0 || x > 63) {
			throw new java.lang.IllegalArgumentException(
				"Bit index out of range, not 1 - 64"
			);
		}
		long n = 1L << x;
		return new SmallInteger( 
			(primitiveLong() & n) == 0 ? 0 : 1
		);
	}

	"Returns the result of changing the bit at (index) in the receiver."
	bitAt: index (SmallInteger) put: bitValue (SmallInteger)
	{	int x = index.primitiveInteger() - 1;
		int v = bitValue.primitiveInteger();		
		if (x < 0 || x > 63) {
			throw new java.lang.IllegalArgumentException(
				"Bit index out of range, not 1 - 64"
			);
		}
		long n = 1L << x;
		if (v == 0) {
			return new LongInteger( primitiveLong() & ~n );
		}
		else
		if (v == 1) {
			return new LongInteger( primitiveLong() | n );
		}
		else {
			throw new java.lang.IllegalArgumentException(
				"Bit value must be 0 or 1"
			);
		}
	}

	"Returns the bitwise shift of the receiver by (count)."
	bitShift: count (SmallInteger)
	{	int n = count.primitiveInteger();
		LongInteger result = new LongInteger( primitiveLong() );

		if (n < 0) {
			result.primitiveValue >>= -n;
		} else {
			result.primitiveValue <<= n;
		}
		return result;
	}

"cumulative math - final"

	"Returns the receiver after adding (aNumber)."
	protected final += aNumber (long)
	{	primitiveValue += aNumber;
		return this;
	}

	"Returns the receiver after subtracting (aNumber)."
	protected final -= aNumber (long)
	{	primitiveValue -= aNumber;
		return this;
	}

	"Returns the receiver after multiplying (aNumber)."
	protected final *= aNumber (long)
	{	primitiveValue *= aNumber;
		return this;
	}

	"Returns the receiver after dividing it by (aNumber)."
	protected final /= aNumber (long)
	{	primitiveValue /= aNumber;
		return this;
	}

"cumulative math"

	"Returns the receiver after adding (aNumber)."
	+= aNumber
	[	^self += (aNumber as: Number) primitiveLong
	]

	"Returns the receiver after subtracting (aNumber)."
	-= aNumber
	[	^self -= (aNumber as: Number) primitiveLong
	]

	"Returns the receiver after multiplying (aNumber)."
	*= aNumber
	[	^self *= (aNumber as: Number) primitiveLong
	]

	"Returns the receiver after dividing it by (aNumber)."
	/= aNumber
	[	^self /= (aNumber as: Number) primitiveLong
	]

"mathematics"

	"Returns the arithmetic inverse of the receiver."
	negated
	{	return new LongInteger( - primitiveLong() );
	}

"intervals"

	"Evaluates (aBlock) with an index, which varies by (delta)
	from the receiver to (aNumber)."
	to: aNumber by: delta do: aBlock (OneArgumentBlock)
	[	[ ^self to: (aNumber as: LongInteger) 
			by: (delta as: LongInteger) do: aBlock
		] catch: [ :e (java.lang.ClassCastException) | ].

		^super to: aNumber by: delta do: aBlock
	]

	"Evaluates (aBlock) with an index, which varies by (delta)
	from the receiver to (aNumber)."
	to: aNumber (LongInteger) by: delta (LongInteger) do: aBlock (OneArgumentBlock)
	[	index (LongInteger) := self copy.
		zero (LongInteger) := 0 asLongInteger.
		delta > zero ifTrue: [
			[ index <= aNumber ] whileTrue: [
				aBlock value: index.
				index += delta.
			]
		] ifFalse: [
			[ aNumber <= index ] whileTrue: [
				aBlock value: index.
				index += delta.
			]
		].
	]

"enumerating"

	"Evaluates (aBlock) the number of times represented by the receiver."
	timesRepeat: aBlock (ZeroArgumentBlock)
	[	count (LongInteger) := self class unity.
		unity (LongInteger) := self class unity.
		[ count <= self ] whileTrue: [
			aBlock value.
			count += unity
		]
	]

"printing"

	"Returns a printable representation of the receiver."
	printString
	[	^primitive StringFrom: 
			(java.lang.Long toString: self primitiveLong)
	]
]