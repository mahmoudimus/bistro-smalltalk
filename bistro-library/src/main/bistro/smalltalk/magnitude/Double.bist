"Double.bist"
package: smalltalk.magnitude;

"Represents an approximation of a real number (double precision).
@author Copyright 1999,2000 Nikolas S. Boyd. All rights reserved."
LimitedPrecisionReal subclass: Double
implements: DoubleFactory
metaclass:
[
	"Returns a Double whose value is (primitiveDouble)."
	DoubleFrom: primitiveDouble (double)
	{	return new Double( primitiveDouble );
	}

	"Returns the primitive double value indicated by (aDouble)."
	(double) doubleFrom: anObject
	{	Double aDouble = (Double) anObject;
		return aDouble.primitiveDouble();
	}

	"Returns a Double whose value is (aNumber)."
	coerce: aNumber (Number)
	[	^aNumber asFloatD
	]

	"Initializes class variables."
	initialize
	{	radiansPerDegree = (java.lang.Math.PI / 180.0);
		degreesPerRadian = (180.0 / java.lang.Math.PI);
		generality = new SmallInteger( 70 );
		return this;
	}

"constants"

	"Returns the value of the constant e."
	e
	{	return new Double( java.lang.Math.E );
	}

	"Returns the value of the constant pi."
	pi
	{	return new Double( java.lang.Math.PI );
	}

	"Returns the additive identity."
	zero
	{	return new Double( 0.0 );
	}

	"Returns the multiplicative identity."
	unity
	{	return new Double( 1.0 );
	}

"characterization"

	"Indicates whether denormalized values are supported."
	denormalized
	[	^false
	]

	"Returns the largest exponent supported."
	emax
	[	^308
	]

	"Returns the smallest exponent supported."
	emin
	[	^-324
	]

	"Returns the relative spacing in the primitive representation."
	epsilon
	[	^self radix raisedTo: (1 - self precision)
	]

	"Returns the maximum supported value."
	fmax
	{	return new Double( java.lang.Double.MAX_VALUE );
	}

	"Returns the minimum supported value."
	fmin
	{	return new Double( java.lang.Double.MIN_VALUE );
	}

	"Returns the minimum denormalized value supported."
	fminDenormalized
	[	^self radix raisedTo: (self emin - self precision)
	]

	"Returns the minimum normalized value supported."
	fminNormalized
	[	^self radix raisedTo: (self emin - 1)
	]

	"Returns the precision of the primitive representation."
	precision
	[	^64
	]

	"Returns the radix of the primitive representation."
	radix
	[	^2
	]

	"Returns the capacity in significant digits."
	significance
	[	^16
	]
]
class:
[
	"Used to convert degress to radians."
	static radiansPerDegree (double).

	"Used to convert radians to degrees."
	static degreesPerRadian (double).

	"Used for numeric coercions."
	static generality (SmallInteger).

	"Holds a primitive double value."
	primitiveValue (double).

	"Constructs a new Double given a (primitiveDouble)."
	protected Double: primitiveDouble (double)
	{	primitiveValue = primitiveDouble;
	}

	"Constructs a new Double."
	protected Double
	{	primitiveValue = 0.0d;
	}

"converting"

	"Converts the receiver to a primitive byte value."
	(byte) primitiveByte
	{	return (byte) primitiveValue;
	}

	"Converts the receiver to a primitive char value."
	(char) primitiveCharacter
	{	return (char) primitiveValue;
	}

	"Converts the receiver to a primitive int value."
	(int) primitiveInteger
	{	return (int) primitiveValue;
	}

	"Converts the receiver to a primitive long value."
	(long) primitiveLong
	{	return (long) primitiveValue;
	}

	"Converts the receiver to a primitive float value."
	(float) primitiveFloat
	{	return (float) primitiveValue;
	}

	"Converts the receiver to a primitive double value."
	(double) primitiveDouble
	{	return primitiveValue;
	}

	"Converts the receiver to an elementary double."
	(java.lang.Double) elementaryDouble
	{	return new java.lang.Double( primitiveValue );
	}

	"Converts the receiver to an elementary number."
	(java.lang.Number) elementaryNumber
	{	return this.elementaryDouble();
	}

	"Converts the receiver to a primitive double value."
	(double) asPrimitive [
		^self primitiveDouble
	]

	"Returns a floating point approximation of the receiver."
	asFloat
	[	^self
	]

	"Returns a double precision floating point approximation of the receiver."
	asFloatD
	[	^self
	]

	"Returns the level of generality used in coercion."
	generality
	[	^generality
	]

	"Returns the receiver value narrowed to its minimal generality."
	narrowGenerality
	{	int resultI = (int) primitiveValue;
		if (((double) resultI) == primitiveValue) 
			return primitive.IntegerFrom( resultI );

		long resultL = (long) primitiveValue;
		if (((double) resultL) == primitiveValue) 
			return new LongInteger( resultL );

		float resultF = (float) primitiveValue;
		if (((double) resultF) == primitiveValue) 
			return primitive.FloatFrom( resultF );

		return this;
	}

"comparing"

	"Indicates whether the receiver is equivalent to (aNumber)."
	final = aNumber (Double)
	{	return primitive.BooleanFrom(
			this.primitiveValue == aNumber.primitiveValue
		);
	}

	"Indicates whether the receiver is less than (aNumber)."
	final < aNumber (Double)
	{	return primitive.BooleanFrom(
			this.primitiveValue < aNumber.primitiveValue
		);
	}

	"Indicates whether the receiver is equivalent to (aNumber)."
	= aNumber (Number)
	[	^self generality < aNumber generality
			ifTrue: [ aNumber = self ]
			ifFalse: [ self = (aNumber asFloatD as: Double) ]
	]

	"Indicates whether the receiver is less than (aNumber)."
	< aNumber (Number)
	[	^self generality < aNumber generality
			ifTrue: [ aNumber > self ]
			ifFalse: [ self < (aNumber asFloatD as: Double) ]
	]

	"Indicates whether the receiver is more than (aNumber)."
	> aNumber (Number)
	[	^self generality < aNumber generality
			ifTrue: [ aNumber < self ]
			ifFalse: [ (aNumber asFloatD as: Double) < self ]
	]

	"Returns an integer value that may be used for equivalence tests."
	(int) hashCode
	{	return elementaryDouble().hashCode();
	}

"arithmetic"

	"Returns the sum of the receiver and (aNumber)."
	final + aNumber (Double)
	{	return new Double(
			this.primitiveValue + aNumber.primitiveValue
		);
	}

	"Returns the product of the receiver and (aNumber)."
	final * aNumber (Double)
	{	return new Double(
			this.primitiveValue * aNumber.primitiveValue
		);
	}

	"Returns the ratio of the receiver and (aNumber)."
	final / aNumber (Double) {
		if (aNumber.primitiveValue == 0.0) zeroDivide();
		return new Double(
			this.primitiveValue / aNumber.primitiveValue
		);
	}

	"Returns the sum of the receiver and (aNumber)."
	+ aNumber (Number)
	[	^self generality < aNumber generality
			ifTrue: [ aNumber + self ]
			ifFalse: [ self + (aNumber asFloatD as: Double) ]
	]

	"Returns the product of the receiver and (aNumber)."
	* aNumber (Number)
	[	^self generality < aNumber generality
			ifTrue: [ aNumber * self ]
			ifFalse: [ self * (aNumber asFloatD as: Double) ]
	]

	"Returns the ratio of the receiver and (aNumber)."
	/ aNumber (Number)
	[	^self generality < aNumber generality
			ifTrue: [ (self coerceTo: aNumber class) / aNumber ]
			ifFalse: [ self / (aNumber asFloatD as: Double) ]
	]

"mathematics"

	"Returns the inverse cosine of the receiver in radians."
	arcCos
	{	return new Double( java.lang.Math.acos( primitiveDouble() ) );
	}

	"Returns the inverse sine of the receiver in radians."
	arcSin
	{	return new Double( java.lang.Math.asin( primitiveDouble() ) );
	}

	"Returns the inverse tangent of the receiver in radians."
	arcTan
	{	return new Double( java.lang.Math.atan( primitiveDouble() ) );
	}

	"Returns the cosine of the receiver in radians."
	cos
	{	return new Double( java.lang.Math.cos( primitiveDouble() ) );
	}

	"Returns the radians value of the receiver degrees."
	degreesToRadians
	{	return new Double( primitiveDouble() * radiansPerDegree );
	}

	"Returns the natural exponential of the receiver."
	exp
	{	return new Double( java.lang.Math.exp( primitiveDouble() ) );
	}

	"Returns the largest integer less than or equal to the logarithm to the
	base of the receiver."
	floorLog: radix
	[	^(self log: radix asFloat) floor
	]

	"Returns the natural logarithm of the receiver."
	ln
	{	return new Double( java.lang.Math.log( primitiveDouble() ) );
	}

	"Returns the logarithm to the base radix of the receiver."
	log: radix
	[	^self ln / radix asFloat ln
	]

	"Returns the arithmetic inverse of the receiver."
	negated
	{	return new Double( - primitiveDouble() );
	}

	"Returns the degrees value of the receiver radians."
	radiansToDegrees
	{	return new Double( primitiveDouble() * degreesPerRadian );
	}

	"Returns the result of raising the receiver to (aNumber) power."
	raisedTo: power (double)
	{	return new Double( 
			java.lang.Math.pow( primitiveDouble(), power ) 
		);
	}

	"Returns the sine of the receiver in radians."
	sin
	{	return new Double( java.lang.Math.sin( primitiveDouble() ) );
	}

	"Returns the tangent of the receiver in radians."
	tan
	{	return new Double( java.lang.Math.tan( primitiveDouble() ) );
	}

"printing"

	"Returns a printable representation of the receiver."
	printString
	{	return primitive.StringFrom(
			java.lang.Double.toString( primitiveDouble() ).replace( 'E', 'd' )
		);
	}

"testing behavior"

	"Indicates whether the receiver is a Float."
	isFloat
	[	^true
	]

	"Indicates whether the receiver is a kind of literal."
	isLiteral
	[	^true
	]
]