"SmallInteger.bist"
package: smalltalk.magnitude;

"Represents an integer value, especially for a literal integer. Manages
flyweight instances of 16 bits precision or whatever maximum is specified 
by the system property named smalltalk.flyweight.integers.
@author Copyright 1999,2000 Nikolas S. Boyd. All rights reserved."
Integer subclass: SmallInteger
implements: IntegerFactory
metaclass:
[
	"Returns a SmallInteger whose value is (primitiveInteger)."
	IntegerFrom: primitiveInteger (int) [
		^self fromPrimitive: primitiveInteger
	]

	"Returns the primitive int value indicated by (anInteger)."
	(int) intFrom: anObject
	{	SmallInteger anInteger = (SmallInteger) anObject;
		return anInteger.primitiveInteger();
	}

	"Returns a SmallInteger whose value is (aNumber)."
	coerce: aNumber (Number) [
		^primitive IntegerFrom: aNumber primitiveInteger
	]

"accessing flyweights"

	"Determines the number of flyweight instances created."
	private static FlyweightExtremum (int) := 4096 asPrimitive.

	"Holds the flyweight instances of the positive integers."
	private positiveInteger (SmallInteger[]).

	"Holds the flyweight instances of the negative integers."
	private negativeInteger (SmallInteger[]).

	"Instantiates the flyweight SmallInteger instances."
	protected initialize {
		java.lang.String flymax = System.getProperty( "smalltalk.flyweight.integers" );
		if (flymax == null) {
			FlyweightExtremum = java.lang.Short.MAX_VALUE;
		} else {
			int maxspec = java.lang.Integer.parseInt( flymax );
			if (maxspec > FlyweightExtremum) FlyweightExtremum = maxspec;
		}
		positiveInteger = new SmallInteger[FlyweightExtremum];
		negativeInteger = new SmallInteger[FlyweightExtremum];
		for( int i = 0; i < FlyweightExtremum; i++ ) {
			positiveInteger[i] = new SmallInteger( i );
			negativeInteger[i] = new SmallInteger( -i );
		}
		// this method MUST be primitive to prevent a runtime recursion error!
		generality = (SmallInteger) fromPrimitive( 10 );
		return this;
	}

	"Returns a SmallInteger flyweight if (primitiveInteger) is in range."
	fromPrimitive: primitiveInteger (int) {
		if (primitiveInteger >= FlyweightExtremum
		|| -primitiveInteger >= FlyweightExtremum) {
			return new SmallInteger( primitiveInteger );
		} else {
			return( primitiveInteger < 0 ?
				negativeInteger[-primitiveInteger] :
				positiveInteger[primitiveInteger]
			);
		}
	}

"characteristics"

	"Returns the maximum value."
	maximum
	{	return primitive.IntegerFrom( java.lang.Integer.MAX_VALUE );
	}

	"Returns the minimum value."
	minimum
	{	return primitive.IntegerFrom( java.lang.Integer.MIN_VALUE );
	}

	"Returns the precision of the primitive representation."
	precision
	[	^32
	]

	"Returns the radix of the primitive representation."
	radix
	[	^2
	]
]
class:
[
	"Used for numeric coercions."
	static generality (SmallInteger).

	"Holds a primitive integer value."
	primitiveValue (int).

	"Constructs a new SmallInteger given a (primitiveInteger)."
	protected SmallInteger: primitiveInteger (int)
	{	primitiveValue = primitiveInteger;
	}

	"Constructs a new SmallInteger."
	protected SmallInteger
	{	primitiveValue = 0;
	}

"arithmetic - final"

	"Returns the sum of the receiver and (aNumber)."
	final + aNumber (SmallInteger) {
		return primitive.IntegerFrom( 
			primitiveInteger() + aNumber.primitiveInteger() 
		);
	}

	"Returns the difference between the receiver and (aNumber)."
	final - aNumber (SmallInteger) {
		return primitive.IntegerFrom( 
			primitiveInteger() - aNumber.primitiveInteger() 
		);
	}

	"Returns the product of the receiver and (aNumber)."
	final * aNumber (SmallInteger) {
		return primitive.IntegerFrom( 
			primitiveInteger() * aNumber.primitiveInteger() 
		);
	}

	"Returns the ratio of (aNumber) and the receiver."
	final / aNumber (SmallInteger) {
		if (aNumber.primitiveValue == 0) zeroDivide();
		return Fraction.$class.numerator_denominator( this, aNumber );
	}

"arithmetic"

	"Returns the sum of the receiver and (aNumber)."
	+ aNumber (Number) {
		try {
			return this.$plus( (SmallInteger) aNumber );
		} catch( ClassCastException e ) {
			return aNumber.$plus( this );
		}
	}

	"Returns the product of the receiver and (aNumber)."
	* aNumber (Number) {
		try {
			return this.$times( (SmallInteger) aNumber );
		} catch( ClassCastException e ) {
			return aNumber.$times( this );
		}
	}

	"Returns the ratio of the receiver and (aNumber)."
	/ aNumber (Number) {
		try {
			return this.$dividedBy( (SmallInteger) aNumber );
		} catch( ClassCastException e ) {
			return this.coerceTo( aNumber.$class() ).perform_with( "/", aNumber );
		}
	}

	"Returns the integer ratio of the receiver and (aNumber)."
	// aNumber (SmallInteger) {
		if (aNumber.primitiveValue == 0) zeroDivide();
		return primitive.IntegerFrom(
			this.primitiveValue / aNumber.primitiveValue
		);
	}

	"Returns the remainder left from dividing the receiver by (aNumber)."
	\\ aNumber (SmallInteger) {
		if (aNumber.primitiveValue == 0) zeroDivide();
		return primitive.IntegerFrom(
			this.primitiveValue % aNumber.primitiveValue
		);
	}

"comparing - final"

	"Indicates whether the receiver is equivalent to (aNumber)."
	final = aNumber (SmallInteger)
	{	return primitive.BooleanFrom(
			this.primitiveValue == aNumber.primitiveValue
		);
	}

	"Indicates whether the receiver is less than (aNumber)."
	final < aNumber (SmallInteger)
	{	return primitive.BooleanFrom(
			this.primitiveValue < aNumber.primitiveValue
		);
	}

	"Indicates whether the receiver is more than (aNumber)."
	final > aNumber (SmallInteger)
	{	return primitive.BooleanFrom(
			this.primitiveValue > aNumber.primitiveValue
		);
	}

"comparing"

	"Indicates whether the receiver is equivalent to (aNumber)."
	= aNumber (Number) {
		try {
			return this.$equal( (SmallInteger) aNumber );
		} catch( ClassCastException e ) {
			return aNumber.$equal( this );
		}
	}

	"Indicates whether the receiver is less than (aNumber)."
	< aNumber (Number) {
		try {
			return this.$lessThan( (SmallInteger) aNumber );
		} catch( ClassCastException e ) {
			return aNumber.$moreThan( this );
		}
	}

	"Indicates whether the receiver is more than (aNumber)."
	> aNumber (Number) {
		try {
			return this.$moreThan( (SmallInteger) aNumber );
		} catch( ClassCastException e ) {
			return aNumber.$lessThan( this );
		}
	}

"converting"

	"Converts the receiver to a primitive byte value."
	(byte) primitiveByte
	{	return (byte) primitiveValue;
	}

	"Converts the receiver to a primitive char value."
	(char) primitiveCharacter
	{	return (char) primitiveValue;
	}

	"Converts the receiver to a primitive int value."
	(int) primitiveInteger
	{	return primitiveValue;
	}

	"Converts the receiver to a primitive long value."
	(long) primitiveLong
	{	return (long) primitiveValue;
	}

	"Converts the receiver to a primitive float value."
	(float) primitiveFloat
	{	return (float) primitiveValue;
	}

	"Converts the receiver to a primitive double value."
	(double) primitiveDouble
	{	return (double) primitiveValue;
	}

	"Converts the receiver to an elementary interger."
	(java.lang.Integer) elementaryInteger
	{	return new java.lang.Integer( primitiveValue );
	}

	"Converts the receiver to an elementary number."
	(java.lang.Number) elementaryNumber
	{	return this.elementaryInteger();
	}

	"Converts the receiver to a primitive int value."
	(int) asPrimitive [
		^self primitiveInteger
	]

	"Converts the receiver to a small integer."
	(SmallInteger) asSmallInteger
	[	^self
	]

	"Converts the receiver to a fast integer."
	(FastInteger) asFastInteger
	[	^FastInteger fromInteger: self
	]

	"Returns the result of converting the receiver to a string."
	asString
	[	^self printString
	]

	"Returns the level of generality used in coercion."
	generality
	[	^generality
	]

"copying"

	"Returns a deep copy of the receiver."
	deepCopy
	[	^self shallowCopy
	]

	"Returns a shallow copy of the receiver."
	shallowCopy
	[	^primitive IntegerFrom: self primitiveInteger
	]

"handling errors"

	"Reports an unmodifiable integer."
	unmodifiableInteger [
		self error: 'Attempt to change an unmodifiable SmallInteger instance'.
	]

"manipulating bits"

	"Returns the bitwise intersection of the receiver and (anInteger)."
	bitAnd: anInteger (Integer) {
		try {
			return this.bitAnd( (SmallInteger) anInteger );
		} catch( ClassCastException e ) {
			return anInteger.bitAnd( this );
		}
	}

	"Returns the bitwise union of the receiver and (anInteger)."
	bitOr: anInteger (Integer) {
		try {
			return this.bitOr( (SmallInteger) anInteger );
		} catch( ClassCastException e ) {
			return anInteger.bitOr( this );
		}
	}

	"Returns the bitwise exclusive or of the receiver and (anInteger)."
	bitXor: anInteger (Integer) {
		try {
			return this.bitXor( (SmallInteger) anInteger );
		} catch( ClassCastException e ) {
			return anInteger.bitXor( this );
		}
	}

	"Returns the bitwise inverse of the recevier."
	bitInvert
	{	return primitive.IntegerFrom( ~primitiveInteger() );
	}

"manipulating bits - concrete"

	"Returns the bitwise intersection of the receiver and (anInteger)."
	bitAnd: anInteger (SmallInteger)
	{	return primitive.IntegerFrom( 
			primitiveInteger() & anInteger.primitiveInteger() 
		);
	}

	"Returns the bitwise union of the receiver and (anInteger)."
	bitOr: anInteger (SmallInteger)
	{	return primitive.IntegerFrom( 
			primitiveInteger() | anInteger.primitiveInteger() 
		);
	}

	"Returns the bitwise exclusive or of the receiver and (anInteger)."
	bitXor: anInteger (SmallInteger)
	{	return primitive.IntegerFrom( 
			primitiveInteger() ^ anInteger.primitiveInteger() 
		);
	}

	"Returns the value of the bit at (index)."
	bitAt: index (SmallInteger)
	{	int x = index.primitiveInteger() - 1;
		if (x < 0 || x > 31) {
			throw new java.lang.IllegalArgumentException(
				"Bit index out of range, not 1 - 32"
			);
		}
		x = 1 << x;
		return primitive.IntegerFrom( 
			(primitiveInteger() & x) == 0 ? 0 : 1
		);
	}

	"Returns the result of changing the bit at (index) in the receiver."
	bitAt: index (SmallInteger) put: bitValue (SmallInteger)
	{	int x = index.primitiveInteger() - 1;
		int v = bitValue.primitiveInteger();		
		if (x < 0 || x > 31) {
			throw new java.lang.IllegalArgumentException(
				"Bit index out of range, not 1 - 32"
			);
		}
		x = 1 << x;
		if (v == 0) {
			return primitive.IntegerFrom(
				primitiveInteger() & ~x
			);
		}
		else
		if (v == 1) {
			return primitive.IntegerFrom(
				primitiveInteger() | x
			);
		}
		else {
			throw new java.lang.IllegalArgumentException(
				"Bit value must be 0 or 1"
			);
		}
	}

	"Returns the bitwise shift of the receiver by (count)."
	bitShift: count (SmallInteger)
	{	int n = count.primitiveInteger();
		SmallInteger result = (SmallInteger) 
			primitive.IntegerFrom( primitiveInteger() );

		if (n < 0) {
			result.primitiveValue >>= -n;
		} else {
			result.primitiveValue <<= n;
		}
		return result;
	}

"testing behavior"

	"Indicates whether the receiver is a kind of literal."
	isLiteral
	[	^true
	]

	"Indicates whether the receiver is a SmallInteger."
	isSmallInteger
	[	^true
	]

"mathematics"

	"Returns the arithmetic inverse of the receiver."
	negated
	{	return primitive.IntegerFrom( - primitiveInteger() );
	}

"enumerating"

	"Evaluates (aBlock) the number of times represented by the receiver."
	timesRepeat: aBlock (ZeroArgumentBlock) [
		count (FastInteger) := 1 asFastInteger.
		[ count <= self ] whileTrue: [
			aBlock value.
			count += 1 asPrimitive.
		]
	]

"intervals"

	"Evaluates (aBlock) with an index, which varies by (delta)
	from the receiver to (aNumber)."
	to: aNumber by: delta do: aBlock (OneArgumentBlock)
	[	[ ^self to: (aNumber as: SmallInteger) 
			by: (delta as: SmallInteger) do: aBlock
		] catch: [ :e (java.lang.ClassCastException) | ].

		^super to: aNumber by: delta do: aBlock
	]

	"Evaluates (aBlock) with an index, which varies by (delta)
	from the receiver to (aNumber)."
	to: aNumber (SmallInteger) by: delta (SmallInteger) do: aBlock (OneArgumentBlock)
	[	index (FastInteger) := self asFastInteger.
		delta > 0 ifTrue: [
			[ index <= aNumber ] whileTrue: [
				aBlock value: index.
				index += delta.
			]
		] ifFalse: [
			[ aNumber <= index ] whileTrue: [
				aBlock value: index.
				index += delta.
			]
		].
	]

"printing"

	"Returns a printable representation of the receiver."
	printString
	[	^primitive StringFrom: 
			(java.lang.Integer toString: self primitiveInteger)
	]
]